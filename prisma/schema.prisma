generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wishlist      Wishlist?
  shoppingList  ShoppingList?
  followers     FriendsList[] @relation("following")
  following     FriendsList[] @relation("follower")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FriendsList {
  follower    User         @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User         @relation("following", fields: [followingId], references: [id])
  followingId String
  status      FollowStatus

  @@id([followerId, followingId])
}

model Wishlist {
  id         String                  @id @default(cuid())
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  owner      User                    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String                  @unique
  items      Item[]
  visibility WishlistVisiblityStatus @default(PRIVATE)
}

model ShoppingList {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  owner     User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String              @unique
  items     ShoppingListItems[]
}

model ShoppingListItems {
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String
  item           Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId         String
  status         ItemStatus   @default(RESERVED)

  @@id([shoppingListId, itemId])
}

model Item {
  id            String              @id @default(cuid())
  name          String              @db.Text
  description   String?             @db.Text
  url           String?             @db.Text
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  wishlist      Wishlist            @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId    String
  shoppingLists ShoppingListItems[]
}

enum WishlistVisiblityStatus {
  PUBLIC
  PRIVATE
}

enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ItemStatus {
  RESERVED
  BOUGHT
}
